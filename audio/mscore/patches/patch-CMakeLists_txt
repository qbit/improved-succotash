Index: CMakeLists.txt
--- CMakeLists.txt.orig
+++ CMakeLists.txt
@@ -255,7 +255,7 @@ endif (${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
 
 if (NOT MSVC)
    set(CMAKE_CXX_FLAGS_DEBUG   "-g")
-   set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG -DQT_NO_DEBUG")
+   set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -DQT_NO_DEBUG")
 endif (NOT MSVC)
 
 if (APPLE)
@@ -410,13 +410,13 @@ endif (BUILD_ALSA)
 ## MIDI
 ##
 
-if (APPLE OR MINGW OR MSVC)
+if (APPLE OR MINGW OR MSVC OR UNIX)
       set (HAS_MIDI 1)
-else (APPLE OR MINGW OR MSVC)
+else (APPLE OR MINGW OR MSVC OR UNIX)
       if (USE_ALSA)
             set (HAS_MIDI 1)
       endif (USE_ALSA)
-endif (APPLE OR MINGW OR MSVC)
+endif (APPLE OR MINGW OR MSVC OR UNIX)
 
 ##
 ## PulseAudio
@@ -424,8 +424,8 @@ endif (APPLE OR MINGW OR MSVC)
 
 if (BUILD_PULSEAUDIO)
       if (PULSEAUDIO_FOUND)
-            set(USE_PULSEAUDIO 1)
-            message("PulseAudio found. PulseAudio support enabled.")
+            set(USE_PULSEAUDIO 0)
+            message("PulseAudio support disabled.")
       else (PULSEAUDIO_FOUND)
             message(SEND_ERROR "Error: PulseAudio support requested (BUILD_PULSEAUDIO=${BUILD_PULSEAUDIO}), but PulseAudio was not found.")
       endif (PULSEAUDIO_FOUND)
@@ -703,7 +703,7 @@ if (NOT MINGW AND NOT MSVC AND NOT APPLE)
             )
     endif (GZIP_EXECUTABLE AND NOT CMAKE_SYSTEM_NAME MATCHES "OpenBSD")
     # Install man pages in either compressed or uncompressed form
-    install( FILES ${MAN_BUILD} DESTINATION share/man/man1 COMPONENT doc)
+    install( FILES ${MAN_BUILD} DESTINATION man/man1 COMPONENT doc)
     # Create symlink alias for man pages so `man musescore` = `man mscore`
     find_program( LN_EXECUTABLE ln DOC "A tool for creating symbolic link aliases (optional)." )
     if (LN_EXECUTABLE)
@@ -714,7 +714,7 @@ if (NOT MINGW AND NOT MSVC AND NOT APPLE)
             COMMAND ${LN_EXECUTABLE} -sf "${MAN_FULL_NAME}" "${MAN_FULL_ALIAS}"
             COMMAND echo 'Symlink alias: ${MAN_FULL_ALIAS} -> ${MAN_FULL_NAME}'
             )
-        install( FILES ${PROJECT_BINARY_DIR}/${MAN_FULL_ALIAS} DESTINATION share/man/man1 COMPONENT doc)
+        install( FILES ${PROJECT_BINARY_DIR}/${MAN_FULL_ALIAS} DESTINATION man/man1 COMPONENT doc)
      else (LN_EXECUTABLE)
          message(STATUS "'ln' not found (it is optional). No symlink aliases will be created.")
      endif (LN_EXECUTABLE)
@@ -740,10 +740,13 @@ precompiled_header(QT_INCLUDES all ${BUILD_PCH})
 
 # MSVC does not require these targets, as all.h is not copied and the
 #   PCH generation is done per-project
-if (NOT MSVC)
+if (NOT MSVC AND NOT UNIX)
    ADD_CUSTOM_TARGET(mops1 DEPENDS ${PROJECT_BINARY_DIR}/all.h)
    ADD_CUSTOM_TARGET(mops2 DEPENDS ${PCH})
-endif (NOT MSVC)
+else  (NOT MSVC AND NOT UNIX)
+   ADD_CUSTOM_TARGET(mops1)
+   ADD_CUSTOM_TARGET(mops2)
+endif (NOT MSVC AND NOT UNIX)
 
 ##
 
@@ -881,13 +884,13 @@ include(Packaging)
 
 ## lupdate is used to generate the translation text files based off of the source code
 
-add_custom_target(lupdate
+add_custom_target(lupdate-qt5
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-qt-projectfile ${PROJECT_SOURCE_DIR} > mscore.pro
-   COMMAND Qt5::lupdate ${PROJECT_BINARY_DIR}/mscore.pro
+   COMMAND lupdate-qt5 ${PROJECT_BINARY_DIR}/mscore.pro
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-instruments-projectfile ${PROJECT_SOURCE_DIR}/share/instruments > instruments.pro
-   COMMAND Qt5::lupdate ${PROJECT_BINARY_DIR}/instruments.pro
+   COMMAND lupdate-qt5 ${PROJECT_BINARY_DIR}/instruments.pro
    COMMAND ${PROJECT_SOURCE_DIR}/build/gen-tours-projectfile ${PROJECT_SOURCE_DIR}/share/tours > tours.pro
-   COMMAND Qt5::lupdate ${PROJECT_BINARY_DIR}/tours.pro
+   COMMAND lupdate-qt5 ${PROJECT_BINARY_DIR}/tours.pro
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
 
@@ -906,11 +909,11 @@ file(GLOB QT_TS_FILES
    "share/locale/qt*.ts"
 )
 
-add_custom_target(lrelease
-   COMMAND Qt5::lrelease ${INSTRUMENTS_TS_FILES}
-   COMMAND Qt5::lrelease ${MSCORE_TS_FILES}
-   COMMAND Qt5::lrelease ${TOURS_TS_FILES}
-   COMMAND Qt5::lrelease ${QT_TS_FILES}
+add_custom_target(lrelease-qt5
+   COMMAND lrelease-qt5 ${INSTRUMENTS_TS_FILES}
+   COMMAND lrelease-qt5 ${MSCORE_TS_FILES}
+   COMMAND lrelease-qt5 ${TOURS_TS_FILES}
+   COMMAND lrelease-qt5 ${QT_TS_FILES}
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
 )
 
