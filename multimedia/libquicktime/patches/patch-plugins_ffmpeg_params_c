Deal with newer FFmpeg API.

Index: plugins/ffmpeg/params.c
--- plugins/ffmpeg/params.c.orig
+++ plugins/ffmpeg/params.c
@@ -101,6 +101,17 @@ typedef struct
     }                                           \
   }
 
+#define PARAM_DICT_INT(name, dict_name)             \
+  {                                                 \
+  if(!strcasecmp(name, key))                        \
+    {                                               \
+    char buf[128];                                  \
+    snprintf(buf, sizeof(buf), "%d", *(int*)value); \
+    av_dict_set(options, dict_name, buf, 0);        \
+    found = 1;                                      \
+    }                                               \
+  }
+
 #define PARAM_DICT_FLAG(name, dict_name)        \
   {                                             \
   if(!strcasecmp(name, key))                    \
@@ -113,16 +124,6 @@ typedef struct
   }
 
 
-enum_t me_method[] =
-  {
-    { "Zero",  ME_ZERO },
-    { "Phods", ME_PHODS },
-    { "Log",   ME_LOG },
-    { "X1",    ME_X1 },
-    { "Epzs",  ME_EPZS },
-    { "Full",  ME_FULL }
-  };
-
 enum_t prediction_method[] =
   {
     { "Left",   FF_PRED_LEFT },
@@ -152,15 +153,6 @@ enum_t mb_decision[] =
     { "Rate distoration",     FF_MB_DECISION_RD }
   };
 
-enum_t coder_type[] =
-  {
-    { "VLC",                  FF_CODER_TYPE_VLC },
-    { "Arithmetic",           FF_CODER_TYPE_AC },
-    { "Raw",                  FF_CODER_TYPE_RAW },
-    { "RLE",                  FF_CODER_TYPE_RLE },
-    { "Deflate",              FF_CODER_TYPE_DEFLATE },
-  };
-
 #define PARAM_ENUM(name, var, arr) \
   if(!strcasecmp(key, name)) \
     { \
@@ -192,7 +184,7 @@ void lqt_ffmpeg_set_parameter(AVCodecContext * ctx,
   PARAM_INT_SCALE("ff_bit_rate_audio",bit_rate,1000);
   PARAM_INT_SCALE("ff_bit_rate_video",bit_rate,1000);
   PARAM_INT_SCALE("ff_bit_rate_tolerance",bit_rate_tolerance,1000);
-  PARAM_ENUM("ff_me_method",me_method,me_method);
+  PARAM_DICT_INT("ff_me_method","motion-est");
   PARAM_INT("ff_gop_size",gop_size);
   PARAM_FLOAT("ff_qcompress",qcompress);
   PARAM_FLOAT("ff_qblur",qblur);
@@ -202,17 +194,23 @@ void lqt_ffmpeg_set_parameter(AVCodecContext * ctx,
   PARAM_INT("ff_max_b_frames",max_b_frames);
   PARAM_FLOAT("ff_b_quant_factor",b_quant_factor);
   PARAM_INT("ff_b_frame_strategy",b_frame_strategy);
+
+#if LIBAVCODEC_VERSION_MAJOR >= 55
+  PARAM_DICT_INT("ff_luma_elim_threshold","luma_elim_threshold");
+  PARAM_DICT_INT("ff_chroma_elim_threshold","chroma_elim_threshold");
+#else
   PARAM_INT("ff_luma_elim_threshold",luma_elim_threshold);
   PARAM_INT("ff_chroma_elim_threshold",chroma_elim_threshold);
+#endif
+
   PARAM_INT("ff_strict_std_compliance",strict_std_compliance);
   PARAM_QP2LAMBDA("ff_b_quant_offset",b_quant_offset);
   PARAM_INT("ff_rc_min_rate",rc_min_rate);
   PARAM_INT("ff_rc_max_rate",rc_max_rate);
   PARAM_INT_SCALE("ff_rc_buffer_size",rc_buffer_size,1000);
-  PARAM_FLOAT("ff_rc_buffer_aggressivity",rc_buffer_aggressivity);
   PARAM_FLOAT("ff_i_quant_factor",i_quant_factor);
   PARAM_QP2LAMBDA("ff_i_quant_offset",i_quant_offset);
-  PARAM_FLOAT("ff_rc_initial_cplx",rc_initial_cplx);
+  PARAM_DICT_INT("ff_rc_initial_cplx","rc_init_cplx");
   PARAM_FLOAT("ff_lumi_masking",lumi_masking);
   PARAM_FLOAT("ff_temporal_cplx_masking",temporal_cplx_masking);
   PARAM_FLOAT("ff_spatial_cplx_masking",spatial_cplx_masking);
@@ -237,58 +235,68 @@ void lqt_ffmpeg_set_parameter(AVCodecContext * ctx,
   PARAM_INT("ff_me_range",me_range);
   PARAM_ENUM("ff_mb_decision",mb_decision,mb_decision);
   PARAM_INT("ff_scenechange_threshold",scenechange_threshold);
-  PARAM_QP2LAMBDA("ff_lmin", lmin);
-  PARAM_QP2LAMBDA("ff_lmax", lmax);
+  PARAM_DICT_INT("ff_lmin", "lmin");
+  PARAM_DICT_INT("ff_lmax", "lmax");
   PARAM_INT("ff_noise_reduction",noise_reduction);
   PARAM_INT_SCALE("ff_rc_initial_buffer_occupancy",rc_initial_buffer_occupancy,1000);
+
+#if LIBAVCODEC_VERSION_MAJOR >= 55
+  PARAM_DICT_INT("ff_inter_threshold","inter_threshold");
+  PARAM_DICT_INT("ff_quantizer_noise_shaping","quantizer_noise_shaping");
+#else
   PARAM_INT("ff_inter_threshold",inter_threshold);
   PARAM_INT("ff_quantizer_noise_shaping",quantizer_noise_shaping);
+#endif
+
   PARAM_INT("ff_thread_count",thread_count);
-  PARAM_INT("ff_me_threshold",me_threshold);
-  PARAM_INT("ff_mb_threshold",mb_threshold);
   PARAM_INT("ff_nsse_weight",nsse_weight);
-  PARAM_FLOAT("ff_border_masking",border_masking);
+  PARAM_DICT_INT("ff_border_masking","border_mask");
   PARAM_QP2LAMBDA("ff_mb_lmin", mb_lmin);
   PARAM_QP2LAMBDA("ff_mb_lmax", mb_lmax);
   PARAM_INT("ff_me_penalty_compensation",me_penalty_compensation);
   PARAM_INT("ff_bidir_refine",bidir_refine);
   PARAM_INT("ff_brd_scale",brd_scale);
-  PARAM_INT("ff_scenechange_factor",scenechange_factor);
-  PARAM_FLAG("ff_flag_qscale",CODEC_FLAG_QSCALE);
-  PARAM_FLAG("ff_flag_4mv",CODEC_FLAG_4MV);
-  PARAM_FLAG("ff_flag_qpel",CODEC_FLAG_QPEL);
-  PARAM_FLAG("ff_flag_gmc",CODEC_FLAG_GMC);
-  PARAM_FLAG("ff_flag_mv0",CODEC_FLAG_MV0);
+  PARAM_FLAG("ff_flag_qscale",AV_CODEC_FLAG_QSCALE);
+  PARAM_FLAG("ff_flag_4mv",AV_CODEC_FLAG_4MV);
+  PARAM_FLAG("ff_flag_qpel",AV_CODEC_FLAG_QPEL);
+  PARAM_DICT_FLAG("ff_flag_gmc","gmc");
+  PARAM_DICT_FLAG("ff_flag_mv0","mpv_flags");
   //  PARAM_FLAG("ff_flag_part",CODEC_FLAG_PART); // Unused
-  PARAM_FLAG("ff_flag_gray",CODEC_FLAG_GRAY);
-  PARAM_FLAG("ff_flag_emu_edge",CODEC_FLAG_EMU_EDGE);
-  PARAM_FLAG("ff_flag_normalize_aqp",CODEC_FLAG_NORMALIZE_AQP);
+  PARAM_FLAG("ff_flag_gray",AV_CODEC_FLAG_GRAY);
+  PARAM_DICT_FLAG("ff_flag_normalize_aqp","naq");
   //  PARAM_FLAG("ff_flag_alt_scan",CODEC_FLAG_ALT_SCAN); // Unused
 #if LIBAVCODEC_VERSION_INT < ((52<<16)+(0<<8)+0)
   PARAM_FLAG("ff_flag_trellis_quant",CODEC_FLAG_TRELLIS_QUANT);
 #else
   PARAM_INT("ff_trellis",trellis);
 #endif
-  PARAM_FLAG("ff_flag_bitexact",CODEC_FLAG_BITEXACT);
-  PARAM_FLAG("ff_flag_ac_pred",CODEC_FLAG_AC_PRED);
+  PARAM_FLAG("ff_flag_bitexact",AV_CODEC_FLAG_BITEXACT);
+  PARAM_FLAG("ff_flag_ac_pred",AV_CODEC_FLAG_AC_PRED);
   //  PARAM_FLAG("ff_flag_h263p_umv",CODEC_FLAG_H263P_UMV); // Unused
-  PARAM_FLAG("ff_flag_cbp_rd",CODEC_FLAG_CBP_RD);
-  PARAM_FLAG("ff_flag_qp_rd",CODEC_FLAG_QP_RD);
 
+#if LIBAVCODEC_VERSION_MAJOR >= 55
+  PARAM_DICT_FLAG("ff_flag_cbp_rd","cbp_rd");
+  PARAM_DICT_FLAG("ff_flag_qp_rd","qp_rd");
+  PARAM_DICT_FLAG("ff_flag2_strict_gop","strict_gop");
+#else
+  PARAM_FLAG("ff_flag_cbp_rd",AV_CODEC_FLAG_CBP_RD);
+  PARAM_FLAG("ff_flag_qp_rd",AV_CODEC_FLAG_QP_RD);
+  PARAM_FLAG2("ff_flag2_strict_gop",AV_CODEC_FLAG2_STRICT_GOP);
+#endif
+
 #if LIBAVCODEC_VERSION_MAJOR >= 54
   PARAM_DICT_FLAG("ff_flag_h263p_aiv", "aiv");
   PARAM_DICT_FLAG("ff_flag_obmc","obmc");
   PARAM_DICT_FLAG("ff_flag_h263p_slice_struct","structured_slices");
 #else
-  PARAM_FLAG("ff_flag_h263p_aiv",CODEC_FLAG_H263P_AIV);
-  PARAM_FLAG("ff_flag_obmc",CODEC_FLAG_OBMC);
-  PARAM_FLAG("ff_flag_h263p_slice_struct",CODEC_FLAG_H263P_SLICE_STRUCT);
+  PARAM_FLAG("ff_flag_h263p_aiv",AV_CODEC_FLAG_H263P_AIV);
+  PARAM_FLAG("ff_flag_obmc",AV_CODEC_FLAG_OBMC);
+  PARAM_FLAG("ff_flag_h263p_slice_struct",AV_CODEC_FLAG_H263P_SLICE_STRUCT);
 #endif
 
-  PARAM_FLAG("ff_flag_loop_filter",CODEC_FLAG_LOOP_FILTER);
-  PARAM_FLAG("ff_flag_closed_gop",CODEC_FLAG_CLOSED_GOP);
-  PARAM_FLAG2("ff_flag2_fast",CODEC_FLAG2_FAST);
-  PARAM_FLAG2("ff_flag2_strict_gop",CODEC_FLAG2_STRICT_GOP);
-  PARAM_ENUM("ff_coder_type",coder_type,coder_type);
+  PARAM_FLAG("ff_flag_loop_filter",AV_CODEC_FLAG_LOOP_FILTER);
+  PARAM_FLAG("ff_flag_closed_gop",AV_CODEC_FLAG_CLOSED_GOP);
+  PARAM_FLAG2("ff_flag2_fast",AV_CODEC_FLAG2_FAST);
+  PARAM_DICT_INT("ff_coder_type","coder");
   
   }
