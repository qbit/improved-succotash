Work with PostgreSQL 14.

Index: agent/bin/pgut/pgut.c
--- agent/bin/pgut/pgut.c.orig
+++ agent/bin/pgut/pgut.c
@@ -9,6 +9,7 @@
 
 #include "postgres_fe.h"
 #include "libpq/pqsignal.h"
+#include "postgresql/server/common/string.h"
 
 #include <limits.h>
 #include <sys/stat.h>
@@ -391,8 +392,7 @@ prompt_for_password(void)
 #if PG_VERSION_NUM >= 100000
 	char	*password;
 
-	password = pgut_malloc(100);
-	simple_prompt("Password: ", password, 100, false);
+	password = simple_prompt("Password: ", false);
 	return password;
 #else
 	return simple_prompt("Password: ", 100, false);
@@ -807,7 +807,7 @@ elog(int elevel, const char *fmt, ...)
 	do
 	{
 		va_start(args, fmt);
-		ok = appendStringInfoVA(&edata->msg, fmt, args);
+		ok = appendStringInfoVA_(&edata->msg, fmt, args);
 		va_end(args);
 	} while (!ok);
 	len = strlen(fmt);
@@ -972,7 +972,7 @@ errmsg(const char *fmt,...)
 	do
 	{
 		va_start(args, fmt);
-		ok = appendStringInfoVA(&edata->msg, fmt, args);
+		ok = appendStringInfoVA_(&edata->msg, fmt, args);
 		va_end(args);
 	} while (!ok);
 	len = strlen(fmt);
@@ -993,7 +993,7 @@ errdetail(const char *fmt,...)
 	do
 	{
 		va_start(args, fmt);
-		ok = appendStringInfoVA(&edata->detail, fmt, args);
+		ok = appendStringInfoVA_(&edata->detail, fmt, args);
 		va_end(args);
 	} while (!ok);
 	trimStringBuffer(&edata->detail);
@@ -1179,7 +1179,7 @@ exit_or_abort(int exitcode)
  * unlike the server code, this function automatically extend the buffer.
  */
 bool
-appendStringInfoVA(StringInfo str, const char *fmt, va_list args)
+appendStringInfoVA_(StringInfo str, const char *fmt, va_list args)
 {
 	size_t		avail;
 	int			nprinted;
