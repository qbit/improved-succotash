Index: Source/cmComputeLinkInformation.cxx
--- Source/cmComputeLinkInformation.cxx.orig
+++ Source/cmComputeLinkInformation.cxx
@@ -371,8 +371,9 @@ cmComputeLinkInformation::cmComputeLinkInformation(
   this->OrderRuntimeSearchPath->AddUserDirectories(directories);
 
   // Set up the implicit link directories.
-  this->LoadImplicitLinkInfo();
+  this->LoadImplicitLinkInfoOpenBSD();
   this->OrderLinkerSearchPath->SetImplicitDirectories(this->ImplicitLinkDirs);
+  this->LoadImplicitLinkInfo();
   this->OrderRuntimeSearchPath->SetImplicitDirectories(this->ImplicitLinkDirs);
   if (this->OrderDependentRPath) {
     this->OrderDependentRPath->SetImplicitDirectories(this->ImplicitLinkDirs);
@@ -713,10 +714,20 @@ void cmComputeLinkInformation::AddItem(BT<std::string>
         // This is a directory.
         this->DropDirectoryItem(item.Value);
       } else {
-        // Use the full path given to the library file.
         this->Depends.push_back(item.Value);
-        this->AddFullItem(item);
-        this->AddLibraryRuntimeInfo(item.Value);
+        if (!this->OpenBSD) {
+          // Use the full path given to the library file.
+          this->AddFullItem(item);
+          this->AddLibraryRuntimeInfo(item.Value);
+        } else {
+          if (cmHasLiteralSuffix(item.Value, ".o"))
+            this->AddFullItem(item);
+          else {
+            std::string file = cmSystemTools::GetFilenameName(item.Value);
+            this->AddUserItem(file, false);
+	  }
+          this->OrderLinkerSearchPath->AddLinkLibrary(item.Value);
+        }
       }
     } else {
       // This is a library or option specified by the user.
@@ -1049,11 +1060,18 @@ void cmComputeLinkInformation::AddTargetItem(BT<std::s
     this->SharedLibrariesLinked.insert(target);
   }
 
+  if (this->OpenBSD) {
+    if (target->GetType() == cmStateEnums::SHARED_LIBRARY) {
+      this->AddSharedLibNoSOName(item.Value);
+      return;
+    }
+  } else {
   // Handle case of an imported shared library with no soname.
-  if (this->NoSONameUsesPath &&
-      target->IsImportedSharedLibWithoutSOName(this->Config)) {
-    this->AddSharedLibNoSOName(item.Value);
-    return;
+    if (this->NoSONameUsesPath &&
+        target->IsImportedSharedLibWithoutSOName(this->Config)) {
+      this->AddSharedLibNoSOName(item.Value);
+      return;
+    }
   }
 
   // For compatibility with CMake 2.4 include the item's directory in
@@ -1066,6 +1084,27 @@ void cmComputeLinkInformation::AddTargetItem(BT<std::s
 
   // Now add the full path to the library.
   this->Items.emplace_back(item, true, target);
+}
+
+void cmComputeLinkInformation::LoadImplicitLinkInfoOpenBSD()
+{
+  std::vector<std::string> implicitDirVec;
+
+  // Get platform-wide implicit directories.
+  if (cmProp implicitLinks =
+        this->Makefile->GetDefinition("CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES")) {
+    this->Makefile->GetDefExpandList(*implicitLinks, implicitDirVec);
+  }
+
+  // Append library architecture to all implicit platform directories
+  // and add them to the set
+  if (cmProp libraryArch =
+        this->Makefile->GetDefinition("CMAKE_LIBRARY_ARCHITECTURE")) {
+    for (std::vector<std::string>::const_iterator i = implicitDirVec.begin();
+         i != implicitDirVec.end(); ++i) {
+      this->ImplicitLinkDirs.insert(*i + "/" + *libraryArch);
+    }
+   }
 }
 
 void cmComputeLinkInformation::AddFullItem(BT<std::string> const& item)
