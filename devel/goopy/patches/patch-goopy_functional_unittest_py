Index: goopy/functional_unittest.py
--- goopy/functional_unittest.py.orig
+++ goopy/functional_unittest.py
@@ -32,56 +32,56 @@
 import sys
 import unittest
 
-from functional import *
+from goopy.functional import *
   
 
 class functionalUnitTest(unittest.TestCase):
   def testSomeEvery(self):
-    assert some(lambda x: x == 5, range(10))
-    assert not every(lambda x: x == 5, range(10))
+    assert some(lambda x: x == 5, list(range(10)))
+    assert not every(lambda x: x == 5, list(range(10)))
     assert not some(lambda x: x == 5, [6] * 10)
     assert every(lambda x: x == 6, [6] * 10)
 
     n = 0
-    for a, b in cyclic_pairs(range(5)):
+    for a, b in cyclic_pairs(list(range(5))):
       assert a == ((b - 1) % 5)
       n += 1
     assert n == 5
 
-    a = range(10)
-    b = range(5, 15)
-    c = range(20, 30)
+    a = list(range(10))
+    b = list(range(5, 15))
+    c = list(range(20, 30))
     assert not intersection(a, c)
     def same_set(a, b):
-      return dict(zip(a, a)) == dict(zip(b, b))
-    assert same_set(intersection(a, b), range(5, 10))
+      return dict(list(zip(a, a))) == dict(list(zip(b, b)))
+    assert same_set(intersection(a, b), list(range(5, 10)))
 
   def testParitionList(self):
-    matched, unmatched = partition_list(lambda x: x % 2, range(5))
-    self.assertEquals(matched, [1, 3])
-    self.assertEquals(unmatched, [0, 2, 4])
+    matched, unmatched = partition_list(lambda x: x % 2, list(range(5)))
+    self.assertEqual(matched, [1, 3])
+    self.assertEqual(unmatched, [0, 2, 4])
     
   def testRemoveDuplicates(self):
-    self.assertEquals(remove_duplicates(range(0, 10)
-                                        + range(5, 15)
-                                        + range(2, 12)),
-                      range(0, 15))
+    self.assertEqual(remove_duplicates(list(range(0, 10))
+                                        + list(range(5, 15))
+                                        + list(range(2, 12))),
+                      list(range(0, 15)))
     
   def testTranspose(self):
-    self.assertEquals(transpose([range(i, i + 20)
+    self.assertEqual(transpose([list(range(i, i + 20))
                                  for i in range(10)]),
                       [tuple(range(j, j + 10))
                        for j in range(20)])
 
   def testFlatten(self):
-    self.assertEquals(flatten1(zip(range(0, 10, 2), range(1, 11, 2))),
-                      range(0, 10))
-    self.assertEquals(flatten1(dict([(x, x) for x in range(3)]).items()),
+    self.assertEqual(flatten1(list(zip(list(range(0, 10, 2)), list(range(1, 11, 2))))),
+                      list(range(0, 10)))
+    self.assertEqual(flatten1(list(dict([(x, x) for x in range(3)]).items())),
                       [0, 0, 1, 1, 2, 2])
 
-    self.assertEquals(flatten([7,(6,[5,4],3),2,1]), [7,6,5,4,3,2,1])
-    self.assertEquals(flatten((4,5,3,2,1)), [4,5,3,2,1])
-    self.assertEquals(flatten(zip(zip(range(0,10,2)), range(1,11,2))),
+    self.assertEqual(flatten([7,(6,[5,4],3),2,1]), [7,6,5,4,3,2,1])
+    self.assertEqual(flatten((4,5,3,2,1)), [4,5,3,2,1])
+    self.assertEqual(flatten(list(zip(list(zip(list(range(0,10,2)))), list(range(1,11,2))))),
                       [0,1,2,3,4,5,6,7,8,9])
     
 if __name__ == '__main__':
