Index: commons/common.ml
--- commons/common.ml.orig
+++ commons/common.ml
@@ -3281,7 +3281,7 @@ let glob pattern =
 let files_of_dir_or_files ext xs =
   xs +> List.map (fun x ->
     if is_directory x
-    then cmd_to_list ("find " ^ x  ^" -noleaf -type f -name \"*." ^ext^"\"")
+    then cmd_to_list ("find " ^ x  ^" -type f -name \"*." ^ext^"\"")
     else [x]
   ) +> List.concat
 
@@ -3291,7 +3291,7 @@ let files_of_dir_or_files_no_vcs ext xs =
     if is_directory x
     then
       cmd_to_list
-        ("find " ^ x  ^" -noleaf -type f -name \"*." ^ext^"\"" ^
+        ("find " ^ x  ^" -type f -name \"*." ^ext^"\"" ^
             "| grep -v /.hg/ |grep -v /CVS/ | grep -v /.git/ |grep -v /_darcs/"
         )
     else [x]
@@ -3304,7 +3304,7 @@ let files_of_dir_or_files_no_vcs_post_filter regex xs 
     then
       cmd_to_list
         ("find " ^ x  ^
-         " -noleaf -type f | grep -v /.hg/ |grep -v /CVS/ | grep -v /.git/ |grep -v /_darcs/"
+         " -type f | grep -v /.hg/ |grep -v /CVS/ | grep -v /.git/ |grep -v /_darcs/"
         )
         +> List.filter (fun s -> s =~ regex)
     else [x]
@@ -5256,7 +5256,7 @@ let (diff: (int -> int -> diff -> unit)-> (string list
     write_file file1 (unwords xs);
     write_file file2 (unwords ys);
     command2
-      ("diff --side-by-side -W 1 " ^ file1 ^ " " ^ file2 ^ " > " ^ fileresult);
+      ("gdiff --side-by-side -W 1 " ^ file1 ^ " " ^ file2 ^ " > " ^ fileresult);
     let res = cat fileresult in
     let a = ref 0 in
     let b = ref 0 in
@@ -5284,7 +5284,7 @@ let (diff2: (int -> int -> diff -> unit) -> (string * 
     write_file "/tmp/diff1" xstr;
     write_file "/tmp/diff2" ystr;
     command2
-     ("diff --side-by-side --left-column -W 1 " ^
+     ("gdiff --side-by-side --left-column -W 1 " ^
       "/tmp/diff1 /tmp/diff2 > /tmp/diffresult");
     let res = cat "/tmp/diffresult" in
     let a = ref 0 in
@@ -5308,7 +5308,8 @@ let parserCommon lexbuf parserer lexer =
     let result = parserer lexer lexbuf in
     result
   with Parsing.Parse_error ->
-    print_string "buf: "; print_string lexbuf.Lexing.lex_buffer;
+    print_string "buf: ";
+    print_string (Bytes.to_string lexbuf.Lexing.lex_buffer);
     print_string "\n";
     print_string "current: "; print_int lexbuf.Lexing.lex_curr_pos;
     print_string "\n";
