Some future version of coccinelle will hopefully configure for unbundled num
or use Zarith instead.

Index: Makefile
--- Makefile.orig
+++ Makefile
@@ -71,7 +71,7 @@ INCLUDEDIRSDEP=commons commons/ocamlextra \
  parsing_cocci parsing_c ocaml python engine popl09 extra \
  $(MAKELIBS)
 
-INCLUDEDIRS=$(INCLUDEDIRSDEP) $(PCREDIR) $(PARMAPDIR) $(INCLIBS)
+INCLUDEDIRS=$(INCLUDEDIRSDEP) $(PCREDIR) $(PARMAPDIR) $(INCLIBS) +num
 
 ##############################################################################
 # Generic variables
@@ -347,7 +347,7 @@ install-man:
 	$(INSTALL_DATA) docs/spatch.1 $(DESTDIR)$(MANDIR)/man1/
 	$(INSTALL_DATA) docs/pycocci.1 $(DESTDIR)$(MANDIR)/man1/
 	$(INSTALL_DATA) docs/spgen.1 $(DESTDIR)$(MANDIR)/man1/
-	$(INSTALL_DATA) docs/Coccilib.3cocci $(DESTDIR)$(MANDIR)/man3/
+	$(INSTALL_DATA) docs/Coccilib.3cocci $(DESTDIR)$(MANDIR)/man3/Coccilib.3
 
 install-bash:
 	@$(ECHO) "Installing bash completion in: ${DESTDIR}${BASH_COMPLETION_DIR}"
@@ -378,9 +378,9 @@ install-python:
 install-stubs:
 	$(MKDIR_P) $(DESTDIR)$(LIBDIR)
 	@if test -f ./bundles/pyml/dllpyml_stubs.so; then \
-		cp -fv ./bundles/pyml/dllpyml_stubs.so $(DESTDIR)$(LIBDIR); fi
+		cp -f ./bundles/pyml/dllpyml_stubs.so $(DESTDIR)$(LIBDIR); fi
 	@if test -f ./bundles/pcre/dllpcre_stubs.so; then \
-		cp -fv ./bundles/pcre/dllpcre_stubs.so $(DESTDIR)$(LIBDIR); fi
+		cp -f ./bundles/pcre/dllpcre_stubs.so $(DESTDIR)$(LIBDIR); fi
 
 install: install-common install-man install-stubs $(PYTHON_INSTALL_TARGET)
 	rm -f $(DESTDIR)$(LIBDIR)/spatch
