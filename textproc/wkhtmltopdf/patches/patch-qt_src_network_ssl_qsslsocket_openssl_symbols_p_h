Index: qt/src/network/ssl/qsslsocket_openssl_symbols_p.h
--- qt/src/network/ssl/qsslsocket_openssl_symbols_p.h.orig
+++ qt/src/network/ssl/qsslsocket_openssl_symbols_p.h
@@ -221,17 +221,10 @@ const BIO_METHOD *q_BIO_s_mem();
 #endif
 int q_BIO_write(BIO *a, const void *b, int c);
 int q_BN_num_bits(const BIGNUM *a);
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int q_CRYPTO_num_locks();
 void q_CRYPTO_set_locking_callback(void (*a)(int, int, const char *, int));
 void q_CRYPTO_set_id_callback(unsigned long (*a)());
 void q_CRYPTO_free(void *a);
-#else
-#define q_CRYPTO_num_locks() 1
-#define q_CRYPTO_set_locking_callback(a)
-#define q_CRYPTO_set_id_callback(a)
-void q_OPENSSL_free(void *a);
-#endif
 void q_DSA_free(DSA *a);
 #if OPENSSL_VERSION_NUMBER >= 0x00908000L
 // 0.9.8 broke SC and BC by changing this function's signature.
@@ -273,7 +266,6 @@ int q_PEM_write_bio_RSA_PUBKEY(BIO *a, RSA *b);
 void q_RAND_seed(const void *a, int b);
 int q_RAND_status();
 void q_RSA_free(RSA *a);
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
 int q_sk_num(STACK *a);
 void q_sk_pop_free(STACK *a, void (*b)(void *));
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
@@ -283,16 +275,6 @@ void * q_sk_value(STACK *a, int b);
 void q_sk_free(STACK *a);
 char * q_sk_value(STACK *a, int b);
 #endif
-#else
-int q_OPENSSL_sk_num(STACK *a);
-void q_OPENSSL_sk_pop_free(STACK *a, void (*b)(void *));
-void q_OPENSSL_sk_free(_STACK *a);
-void * q_OPENSSL_sk_value(STACK *a, int b);
-#define q_sk_num q_OPENSSL_sk_num
-#define q_sk_pop_free q_OPENSSL_sk_pop_free
-#define q_sk_free q_OPENSSL_sk_free
-#define q_sk_value q_OPENSSL_sk_value
-#endif
 int q_SSL_accept(SSL *a);
 int q_SSL_clear(SSL *a);
 char *q_SSL_CIPHER_description(SSL_CIPHER *a, char *b, int c);
@@ -344,7 +326,7 @@ long q_SSL_get_verify_result(SSL *a);
 int q_SSL_library_init();
 void q_SSL_load_error_strings();
 #else
-int q_OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
+int q_OPENSSL_init_ssl(uint64_t opts, const void *settings);
 #define q_SSL_library_init() q_OPENSSL_init_ssl(0, NULL)
 #define q_SSL_load_error_strings() q_OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)
 #endif
@@ -446,24 +428,16 @@ DSA *q_d2i_DSAPrivateKey(DSA **a, unsigned char **pp, 
 		PEM_ASN1_write_bio((int (*)(void*, unsigned char**))q_i2d_DSAPrivateKey,PEM_STRING_DSA,\
 			bp,(char *)x,enc,kstr,klen,cb,u)
 #endif
-
 X509_STORE * q_SSL_CTX_get_cert_store(const SSL_CTX *ctx);
 ASN1_INTEGER * q_X509_get_serialNumber(X509 *x);
-
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
 #define q_SSL_CTX_set_options(ctx,op) q_SSL_CTX_ctrl((ctx),SSL_CTRL_OPTIONS,(op),NULL)
-#define q_X509_get_version(x) X509_get_version(x)
-#else
 int q_EVP_PKEY_id(const EVP_PKEY *pkey);
 int q_EVP_PKEY_base_id(const EVP_PKEY *pkey);
 int q_SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *alg_bits);
-long q_SSL_CTX_set_options(SSL_CTX *ctx, long options);
 long q_X509_get_version(X509 *x);
 X509_PUBKEY * q_X509_get_X509_PUBKEY(X509 *x);
 int q_RSA_bits(const RSA *rsa);
-int q_DSA_security_bits(const DSA *dsa);
 void q_DSA_get0_pqg(const DSA *d, const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);
-#endif
 
 #define q_SKM_sk_num(type, st) ((int (*)(const STACK_OF(type) *))q_sk_num)(st)
 #define q_SKM_sk_value(type, st,i) ((type * (*)(const STACK_OF(type) *, int))q_sk_value)(st, i)
@@ -499,7 +473,7 @@ ASN1_TIME *q_X509_getm_notBefore(X509 *x);
 void q_OPENSSL_add_all_algorithms_noconf();
 void q_OPENSSL_add_all_algorithms_conf();
 #else
-int q_OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
+int q_OPENSSL_init_crypto(uint64_t opts, const void *settings);
 #define q_OPENSSL_add_all_algorithms_conf() q_OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS | OPENSSL_INIT_ADD_ALL_DIGESTS | OPENSSL_INIT_LOAD_CONFIG, NULL)
 #  define q_OPENSSL_add_all_algorithms_noconf() q_OPENSSL_init_crypto(OPENSSL_INIT_ADD_ALL_CIPHERS | OPENSSL_INIT_ADD_ALL_DIGESTS, NULL)
 #endif
