Index: enforcer/utils/1.4-2.0_db_convert/README.md
--- enforcer/utils/1.4-2.0_db_convert/README.md.orig
+++ enforcer/utils/1.4-2.0_db_convert/README.md
@@ -16,8 +16,8 @@ General preparation
 -------------------
 
  * First stop OpenDNSSEC entirely.
- * You are strongly advised to backup /etc/opendnssec and /var/opendnssec before
-   continuing.
+ * You are strongly advised to backup ${SYSCONFDIR}/opendnssec and
+   ${LOCALSTATEDIR}/opendnssec before continuing.
  * Also prevent any nameserver from receiving updates from OpenDNSSEC until
    you are sure the migration was successful.
  * It is discouraged to perform the migration during a rollover. The migration
@@ -31,39 +31,44 @@ Conversion Sqlite
 
 There are 2 relevant files for the conversion:
 
- * convert_sqlite - A bash conversion script
- * sqlite_convert.sql - Contains SQL statements, called by convert_sqlite
+ * ${PREFIX}/sbin/ods-migrate-sqlite3 - Conversion script
+ * ${PREFIX}/share/opendnssec/migration/migrate-sqlite.sql -
+	Contains SQL statements, called by ods-migrate-sqlite3
 
-call the script like so: `./convert_sqlite -i INPUT -o OUTPUT`. Where INPUT is
-the kasp.db file commonly found in _/var/opendnssec/kasp.db_. And OUTPUT is a
-non-existing file where the new database should go. On success, replace old
-database file with the new database file or adjust _conf.xml_ accordingly.
+Call the script like so: `${PREFIX}/sbin/ods-migrate-sqlite3 -i INPUT -o OUTPUT`.
+Where INPUT is the kasp.db file commonly found in _${LOCALSTATEDIR}/opendnssec/db/kasp.db_.
+And OUTPUT is a non-existing file where the new database should go,
+default location for OpenDNSSEC 2.x is _${LOCALSTATEDIR}/opendnssec/kasp.db_.
+On success, replace old database file with the new database file or adjust
+_${SYSCONFDIR}/opendnssec/conf.xml_ accordingly.
 
 Conversion MySQL
 ----------------
  
 There are 2 relevant files for the conversion:
 
- * convert_mysql - A bash conversion script
- * mysql_convert.sql - Contains SQL statements, called by convert_mysql
+ * ${PREFIX}/sbin/ods-migrate-mysql - Conversion script
+ * ${PREFIX}/share/opendnssec/migration/migrate-mysql.sql -
+	Contains SQL statements, called by ods-migrate-mysql
 
-call the script like so: `./convert_mysql -i INPUT -o OUTPUT -h HOST -u USER
--p PASSWORD`. Where INPUT is the name of the existing database on HOST. And
+Call the script like so:
+`${PREFIX}/sbin/ods-migrate-mysql -i INPUT -o OUTPUT -h HOST -u USER -p PASSWORD`.
+Where INPUT is the name of the existing database on HOST. And
 OUTPUT is a non-existing database on the same host where the new database
 should go. On success, replace old database with the new database file or
-adjust _conf.xml_ accordingly.
-  
+adjust _${SYSCONFDIR}/opendnssec/conf.xml_ accordingly.
+
 Post Conversion
 ---------------
 
 ODS 2.0 stores the keytags in the database, 1.4 unfortunately does not.
 Therefore an additional tool is provided which calculates the keytags and
 stores them in the database. Make sure that at this point _conf.xml_ points to
-the new database. Then run `ods-migrate`.
+the new database. Then run `${PREFIX}/sbin/ods-migrate`.
 
 Now your new database is ready for use. At this point the signer will refuse to
-run because the file `/var/opendnssec/enforcer/zones.xml` does not exist
-yet.  In ODS 1.4 `/etc/opendnssec/zonelist.xml` is always on par with the
+run because the file `${LOCALSTATEDIR}/opendnssec/enforcer/zones.xml` does not exist
+yet. In ODS 1.4 `${SYSCONFDIR}/opendnssec/zonelist.xml` is always on par with the
 database contents (this is no longer true for 2.0) so it is safe to copy this
 file over to the missing file.
 
