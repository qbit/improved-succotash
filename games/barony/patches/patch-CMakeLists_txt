Remove hardcoded -O3
Rename binary to barony-bin because we are invoking the
game via a wrapper script, which is named barony.

Index: CMakeLists.txt
--- CMakeLists.txt.orig
+++ CMakeLists.txt
@@ -14,7 +14,7 @@ endif()
 if (DEFINED ENV{OPTIMIZATION_LEVEL})
 	set (OPTIMIZATION_LEVEL $ENV{OPTIMIZATION_LEVEL})
 else()
-	set (OPTIMIZATION_LEVEL "-O3")
+	set (OPTIMIZATION_LEVEL "")
 endif()
 
 if (DEFINED ENV{EOS_ENABLED})
@@ -363,7 +363,7 @@ if (APPLE)
   #set_source_files_properties(${GAME_SOURCES} PROPERTIES COMPILE_FLAGS "-stdlib=libc++")
 else()
   if (GAME_ENABLED)
-    add_executable(barony ${GAME_SOURCES})
+    add_executable(barony-bin ${GAME_SOURCES})
   endif (GAME_ENABLED)
 endif(APPLE)
 
@@ -385,15 +385,15 @@ if (GAME_ENABLED)
   else(WIN32)
     if( ("${CMAKE_SIZEOF_VOID_P}" EQUAL "8") AND (NOT APPLE) )
       # 64 bit
-      target_link_libraries(barony -L/usr/lib64 -lstdc++)
+      target_link_libraries(barony-bin -L/usr/lib64 -lstdc++)
     endif()
-    target_link_libraries(barony ${SDL2_LIBRARIES} ${SDL2_LIBRARY} ${SDL2IMAGE_LIBRARIES} ${SDL2_IMAGE_LIBRARIES} ${SDL2_NET_LIBRARIES} ${SDL2_TTF_LIBRARIES} ${SDL2TTF_LIBRARY})
+    target_link_libraries(barony-bin ${SDL2_LIBRARIES} ${SDL2_LIBRARY} ${SDL2IMAGE_LIBRARIES} ${SDL2_IMAGE_LIBRARIES} ${SDL2_NET_LIBRARIES} ${SDL2_TTF_LIBRARIES} ${SDL2TTF_LIBRARY})
     if (STEAMWORKS_ENABLED)
-      target_link_libraries(barony ${STEAMWORKS_LIBRARY})
+      target_link_libraries(barony-bin ${STEAMWORKS_LIBRARY})
       #target_link_libraries(barony ${STEAMWORKS_CWRAPPER_LIBRARIES} -lstdc++)
 	endif()
     if (EOS_ENABLED)
-      target_link_libraries(barony ${EOS_LIBRARIES})
+      target_link_libraries(barony-bin ${EOS_LIBRARIES})
     endif()
     if (APPLE)
       target_link_libraries(barony ${GLUT_LIBRARIES} ${PROJECT_SOURCE_DIR}/libpng16.16.dylib) #Wait...what? if(APPLE) in if(WIN32)? What was I thinking back then, haha.
@@ -403,23 +403,23 @@ if (GAME_ENABLED)
       find_path(EXECINFO_INC NAMES execinfo.h)
       find_library(EXECINFO_LIB NAMES execinfo)
       include_directories(${EXECINFO_INC})
-      target_link_libraries(barony ${EXECINFO_LIB})
+      target_link_libraries(barony-bin ${EXECINFO_LIB})
     endif()
   endif()
-  target_link_libraries(barony ${OPENGL_LIBRARIES})
-  target_link_libraries(barony ${THREADS_LIBRARIES})
-  target_link_libraries(barony -lm)
+  target_link_libraries(barony-bin ${OPENGL_LIBRARIES})
+  target_link_libraries(barony-bin ${THREADS_LIBRARIES})
+  target_link_libraries(barony-bin -lm)
   if (NOT CMAKE_SYSTEM_NAME MATCHES "Haiku")
-	  target_link_libraries(barony -lc)
+	  target_link_libraries(barony-bin -lc)
   else()
 	  target_link_libraries(barony -lroot)
   endif()
   if( NOT WIN32 AND NOT APPLE)
     #Remember, Windows and Mac aren't using find_package for FMOD and PNG.
-    target_link_libraries(barony ${PNG_LIBRARY})
-    target_link_libraries(barony ${PHYSFS_LIBRARY})
+    target_link_libraries(barony-bin ${PNG_LIBRARY})
+    target_link_libraries(barony-bin ${PHYSFS_LIBRARY})
     if (FMOD_FOUND)
-      target_link_libraries(barony ${FMOD_LIBRARY})
+      target_link_libraries(barony-bin ${FMOD_LIBRARY})
     endif()
   endif()
   if (APPLE)
@@ -436,14 +436,14 @@ if (GAME_ENABLED)
       target_link_libraries(barony -lfmodex) #Finally manually link fmod for mac.
     endif()
   endif(APPLE)
-  target_link_libraries(barony ${EXTRA_LIBS}) #Apple needs this for OpenGL to work.
+  target_link_libraries(barony-bin ${EXTRA_LIBS}) #Apple needs this for OpenGL to work.
 
   if (OPENAL)
-    target_link_libraries(barony ${OPENAL_LIBRARY})
+    target_link_libraries(barony-bin ${OPENAL_LIBRARY})
     if(TREMOR_ENABLED)
-      target_link_libraries(barony ${TREMOR_LIBRARY})
+      target_link_libraries(barony-bin ${TREMOR_LIBRARY})
     else()
-      target_link_libraries(barony ${VORBISFILE_LIBRARY} ${OGG_LIBRARY})
+      target_link_libraries(barony-bin ${VORBISFILE_LIBRARY} ${OGG_LIBRARY})
     endif()
   endif()
 endif(GAME_ENABLED)
@@ -458,7 +458,7 @@ if (NOT APPLE AND UNIX)
   message(STATUS "Base data directory ${BASE_DATA_DIR}")
 
   if (GAME_ENABLED)
-    install(TARGETS barony
+    install(TARGETS barony-bin
     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     COMPONENT Runtime
     )
@@ -561,7 +561,7 @@ if (NOT APPLE AND UNIX)
     )
   endif()
 
-  install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lang DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/barony)
+  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lang DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/barony)
 
   if (EXISTS books)
     install(DIRECTORY 
