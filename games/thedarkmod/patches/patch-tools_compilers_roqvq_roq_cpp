replace functions from ExtLibs with system ones

Index: tools/compilers/roqvq/roq.cpp
--- tools/compilers/roqvq/roq.cpp.orig
+++ tools/compilers/roqvq/roq.cpp
@@ -19,7 +19,7 @@
 
 #include "roq.h"
 #include "codec.h"
-#include "../ExtLibs/jpeg.h"
+#include <jpeglib.h>
 
 roq		*theRoQ;				// current roq file
 
@@ -270,13 +270,13 @@ void roq::JPEGStartCompress (j_compress_ptr cinfo, boo
     ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 
   if (write_all_tables)
-    ExtLibs::jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
+    jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
 
   /* (Re)initialize error mgr and destination modules */
   (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
   (*cinfo->dest->init_destination) (cinfo);
   /* Perform master selection of active modules */
-  ExtLibs::jinit_compress_master( cinfo );
+  jinit_compress_master( cinfo );
   /* Set up for the first pass */
   (*cinfo->master->prepare_for_pass) (cinfo);
   /* Ready for application to drive first pass through jpeg_write_scanlines
@@ -423,9 +423,9 @@ void roq::WriteLossless( void ) {
 	* This routine fills in the contents of struct jerr, and returns jerr's
 	* address which we place into the link field in cinfo.
 	*/
-	cinfo.err = ExtLibs::jpeg_std_error(&jerr);
+	cinfo.err = jpeg_std_error(&jerr);
 	/* Now we can initialize the JPEG compression object. */
-	ExtLibs::jpeg_create_compress( &cinfo );
+	jpeg_create_compress( &cinfo );
 
 	/* Step 2: specify data destination (eg, a file) */
 	/* Note: steps 2 and 3 can be done in either order. */
@@ -451,11 +451,11 @@ void roq::WriteLossless( void ) {
 	* (You must set at least cinfo.in_color_space before calling this,
 	* since the defaults depend on the source color space.)
 	*/
-	ExtLibs::jpeg_set_defaults(&cinfo);
+	jpeg_set_defaults(&cinfo);
 	/* Now you can set any non-default parameters you wish to.
 	* Here we just illustrate the use of quality (quantization table) scaling:
 	*/
-	ExtLibs::jpeg_set_quality( &cinfo, paramFile->JpegQuality(), true /* limit to baseline-JPEG values */ );
+	jpeg_set_quality( &cinfo, paramFile->JpegQuality(), true /* limit to baseline-JPEG values */ );
 
 	/* Step 4: Start compressor */
 
@@ -486,7 +486,7 @@ void roq::WriteLossless( void ) {
 
 	/* Step 6: Finish compression */
 
-	ExtLibs::jpeg_finish_compress(&cinfo);
+	jpeg_finish_compress(&cinfo);
 	/* After finish_compress, we can close the output file. */
 
 	directdw = hackSize;
@@ -501,7 +501,7 @@ void roq::WriteLossless( void ) {
 	/* Step 7: release JPEG compression object */
 
 	/* This is an important step since it will release a good deal of memory. */
-	ExtLibs::jpeg_destroy_compress(&cinfo);
+	jpeg_destroy_compress(&cinfo);
 
 	/* And we're done! */
 	encoder->SetPreviousImage( "first frame", image );
