replace functions from ExtLibs with system ones

Index: renderer/CinematicID.cpp
--- renderer/CinematicID.cpp.orig
+++ renderer/CinematicID.cpp
@@ -1283,7 +1283,7 @@ jpeg_memory_src (j_decompress_ptr cinfo, byte *infile,
   src->pub.init_source = init_source;
   src->pub.fill_input_buffer = fill_input_buffer;
   src->pub.skip_input_data = skip_input_data;
-  src->pub.resync_to_restart = ExtLibs::jpeg_resync_to_restart; /* use default method */
+  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
   src->pub.term_source = term_source;
   src->infile = infile;
   src->memsize = size;
@@ -1308,10 +1308,10 @@ int JPEGBlit( byte *wStatus, byte *data, int datasize 
   /* Step 1: allocate and initialize JPEG decompression object */
 
   /* We set up the normal JPEG error routines, then override error_exit. */
-  cinfo.err = ExtLibs::jpeg_std_error( &jerr );
+  cinfo.err = jpeg_std_error( &jerr );
 
   /* Now we can initialize the JPEG decompression object. */
-  ExtLibs::jpeg_create_decompress( &cinfo );
+  jpeg_create_decompress( &cinfo );
 
   /* Step 2: specify data source (eg, a file) */
 
@@ -1319,7 +1319,7 @@ int JPEGBlit( byte *wStatus, byte *data, int datasize 
 
   /* Step 3: read file parameters with jpeg_read_header() */
 
-  (void) ExtLibs::jpeg_read_header(&cinfo, TRUE);
+  (void) jpeg_read_header(&cinfo, TRUE);
   /* We can ignore the return value from jpeg_read_header since
    *   (a) suspension is not possible with the stdio data source, and
    *   (b) we passed TRUE to reject a tables-only JPEG file as an error.
@@ -1340,7 +1340,7 @@ int JPEGBlit( byte *wStatus, byte *data, int datasize 
     cinfo.do_fancy_upsampling = FALSE;
 //	cinfo.out_color_space = JCS_GRAYSCALE;
 	
-  (void) ExtLibs::jpeg_start_decompress(&cinfo);
+  (void) jpeg_start_decompress(&cinfo);
   /* We can ignore the return value since suspension is not possible
    * with the stdio data source.
    */
@@ -1371,7 +1371,7 @@ int JPEGBlit( byte *wStatus, byte *data, int datasize 
      * Here the array is only one element long, but you could ask for
      * more than one scanline at a time if that's more convenient.
      */
-	  (void)ExtLibs::jpeg_read_scanlines( &cinfo, &buffer[0], 1 );
+	  (void)jpeg_read_scanlines( &cinfo, &buffer[0], 1 );
 
     /* Assume put_scanline_someplace wants a pointer and sample count. */
 	memcpy( wStatus, &buffer[0][0], row_stride );
@@ -1393,7 +1393,7 @@ int JPEGBlit( byte *wStatus, byte *data, int datasize 
 
   /* Step 7: Finish decompression */
 
-  (void)ExtLibs::jpeg_finish_decompress( &cinfo );
+  (void)jpeg_finish_decompress( &cinfo );
   /* We can ignore the return value since suspension is not possible
    * with the stdio data source.
    */
@@ -1401,7 +1401,7 @@ int JPEGBlit( byte *wStatus, byte *data, int datasize 
   /* Step 8: Release JPEG decompression object */
 
   /* This is an important step since it will release a good deal of memory. */
-  ExtLibs::jpeg_destroy_decompress(&cinfo);
+  jpeg_destroy_decompress(&cinfo);
 
   /* At this point you may want to check to see whether any corrupt-data
    * warnings occurred (test whether jerr.pub.num_warnings is nonzero).
