https://bugzilla.mozilla.org/show_bug.cgi?id=1714919

Try to fix opening downloaded files with registered external mimetype handlers
after gio-launch-desktop removal in glib 2.64.

more or less replaces g_app_info_launch_uris() (which relies on /bin/sh in
2.64) calls by g_spawn_async() using a handler that should be previously
unveiled.

Index: toolkit/system/gnome/nsGIOService.cpp
--- toolkit/system/gnome/nsGIOService.cpp.orig
+++ toolkit/system/gnome/nsGIOService.cpp
@@ -223,11 +223,21 @@ nsGIOMimeApp::LaunchWithURI(nsIURI* aUri,
   uris.data = const_cast<char*>(spec.get());
 
   GUniquePtr<GError> error;
-  gboolean result =
-      g_app_info_launch_uris(mApp, &uris, nullptr, getter_Transfers(error));
+  gchar *path = g_filename_from_uri(spec.get(), NULL, NULL);
+  const gchar *bin = g_app_info_get_executable(mApp);
+  if (!bin) {
+    g_warning("no executable found for %s, maybe not unveiled ?", g_app_info_get_name(mApp));
+    return NS_ERROR_FAILURE;
+  }
+  g_message("LaunchWithURI: spawning %s %s for %s", bin, path, spec.get());
+  const gchar * const argv[] = { bin, path, NULL };
 
+  GSpawnFlags flags = static_cast<GSpawnFlags>(G_SPAWN_SEARCH_PATH |
+                                               G_SPAWN_DO_NOT_REAP_CHILD);
+  gboolean result = g_spawn_async( NULL, (char**) argv, NULL, flags, NULL, NULL, NULL, getter_Transfers(error));
+
   if (!result) {
-    g_warning("Cannot launch application: %s", error->message);
+    g_warning("Cannot launch application %s with arg %s: %s", bin, path, error->message);
     return NS_ERROR_FAILURE;
   }
 
@@ -481,23 +491,18 @@ nsGIOService::GetAppForMimeType(const nsACString& aMim
     return NS_ERROR_NOT_AVAILABLE;
   }
 
-#if defined(__OpenBSD__) && defined(MOZ_SANDBOX)
-  // g_app_info_get_default_for_type will fail on OpenBSD's veiled filesystem
-  // since we most likely don't have direct access to the binaries that are
-  // registered as defaults for this type.  Fake it up by just executing
-  // xdg-open via gio-launch-desktop (which we do have access to) and letting
-  // it figure out which program to execute for this MIME type
-  RefPtr<GAppInfo> app_info = dont_AddRef(g_app_info_create_from_commandline(
-      "/usr/local/bin/xdg-open",
-      nsPrintfCString("System default for %s", content_type.get()).get(),
-      G_APP_INFO_CREATE_NONE, NULL));
-#else
   RefPtr<GAppInfo> app_info =
       dont_AddRef(g_app_info_get_default_for_type(content_type.get(), false));
-#endif
   if (!app_info) {
     return NS_ERROR_FAILURE;
   }
+  char *t;
+  t = g_find_program_in_path(g_app_info_get_executable(app_info));
+  if (t != NULL) {
+    g_debug("%s is registered as handler for %s, binary available as %s", g_app_info_get_executable(app_info), content_type.get(), t);
+  } else {
+    g_warning("%s is registered as handler for %s but not available in PATH (missing unveil ?)", g_app_info_get_executable(app_info), content_type.get());
+  }
   RefPtr<nsGIOMimeApp> mozApp = new nsGIOMimeApp(app_info.forget());
   mozApp.forget(aApp);
   return NS_OK;
@@ -527,8 +532,24 @@ nsGIOService::ShowURI(nsIURI* aURI) {
   nsresult rv = aURI->GetSpec(spec);
   NS_ENSURE_SUCCESS(rv, rv);
   GUniquePtr<GError> error;
-  if (!g_app_info_launch_default_for_uri(spec.get(), nullptr,
-                                         getter_Transfers(error))) {
+  gboolean result_uncertain;
+  gchar *path = g_filename_from_uri(spec.get(), NULL, NULL);
+  gchar *content_type = g_content_type_guess(path, NULL, 0, &result_uncertain);
+  if (content_type != NULL && !result_uncertain) {
+    GAppInfo* app_info = g_app_info_get_default_for_type(content_type, false);
+    const gchar *bin = g_app_info_get_executable(app_info);
+    if (!bin) {
+      g_warning("no executable found for %s, maybe not unveiled ?", g_app_info_get_name(app_info));
+      return NS_ERROR_FAILURE;
+    }
+    g_message("ShowURI: spawning %s %s for %s (content type %s)", bin, path, spec.get(), content_type);
+    const gchar * const argv[] = { bin, path, NULL };
+    GSpawnFlags flags = static_cast<GSpawnFlags>(G_SPAWN_SEARCH_PATH |
+                                                 G_SPAWN_DO_NOT_REAP_CHILD);
+    g_spawn_async( NULL, (char**) argv, NULL, flags, NULL, NULL, NULL, getter_Transfers(error));
+  }
+  g_free(content_type);
+  if (error) {
     g_warning("Could not launch default application for URI: %s",
               error->message);
     return NS_ERROR_FAILURE;
@@ -542,8 +563,23 @@ nsGIOService::ShowURIForInput(const nsACString& aUri) 
       g_file_new_for_commandline_arg(PromiseFlatCString(aUri).get()));
   GUniquePtr<char> spec(g_file_get_uri(file));
   GUniquePtr<GError> error;
-  g_app_info_launch_default_for_uri(spec.get(), nullptr,
-                                    getter_Transfers(error));
+  gboolean result_uncertain;
+  gchar *path = g_filename_from_uri(spec.get(), NULL, NULL);
+  gchar *content_type = g_content_type_guess(path, NULL, 0, &result_uncertain);
+  if (content_type != NULL && !result_uncertain) {
+    GAppInfo* app_info = g_app_info_get_default_for_type(content_type, false);
+    const gchar *bin = g_app_info_get_executable(app_info);
+    if (!bin) {
+      g_warning("no executable found for %s, maybe not unveiled ?", g_app_info_get_name(app_info));
+      return NS_ERROR_FAILURE;
+    }
+    g_message("ShowURIForInput: spawning %s %s for %s (content type %s)", bin, path, spec.get(), content_type);
+    const gchar * const argv[] = { bin, path, NULL };
+    GSpawnFlags flags = static_cast<GSpawnFlags>(G_SPAWN_SEARCH_PATH |
+                                                 G_SPAWN_DO_NOT_REAP_CHILD);
+    g_spawn_async( NULL, (char**) argv, NULL, flags, NULL, NULL, NULL, getter_Transfers(error));
+  }
+  g_free(content_type);
   if (error) {
     g_warning("Cannot launch default application: %s", error->message);
     return NS_ERROR_FAILURE;
